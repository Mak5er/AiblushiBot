from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

import keyboards as kb
from config import ADMIN_ID, CHAT_ID
from services.db import add_user, get_user_by_id, is_user_approved
from utils.helpers import check_private_chat

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_router = Router()


@user_router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö
    if not check_private_chat(message):
        return

    await message.bot.send_chat_action(message.chat.id, "typing")

    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ
    user = await get_user_by_id(user_id)

    if not user:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await add_user(user_id, username)

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await message.bot.send_chat_action(ADMIN_ID, "typing")
        approve_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_id}"),
                types.InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
            ]
        ])

        await message.bot.send_message(
            admin_id,
            f"üë§ <b>–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î –¥–æ—Å—Ç—É–ø:</b>\n\n"
            f"ID: <code>{user_id}</code>\n"
            f"Username: @{username if username else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"–Ü–º'—è: {message.from_user.full_name}",
            parse_mode="HTML",
            reply_markup=approve_kb
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await message.answer(
            f"üëã <b>–í—ñ—Ç–∞—î–º–æ –≤–∞—Å, {message.from_user.first_name}!</b>\n\n"
            f"–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
            parse_mode="HTML"
        )
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø
        if await is_user_approved(user_id):
            await message.answer(
                f"üëã <b>–í—ñ—Ç–∞—î–º–æ –∑–Ω–æ–≤—É, {message.from_user.first_name}!</b>\n\n"
                f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=kb.main_menu_kb,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"üëã <b>–í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name}!</b>\n\n"
                f"–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø —â–µ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
                parse_mode="HTML"
            )

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω FSM
    await state.clear()


@user_router.message()
async def handle_menu(message: types.Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, "typing")
    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if message.chat.type != "private":
        return

    if message.text in ["üè† –ú–µ–Ω—é", "üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"]:
        await message.answer("üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>", reply_markup=kb.main_menu_kb, parse_mode="HTML")
        await state.clear()
        return
