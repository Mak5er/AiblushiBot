import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import keyboards as kb
from config import CHAT_ID
from handlers.work import WorkStates
from services.db import (
    get_all_approved_users,
    add_other_work
)
from utils.helpers import (
    init_partner_selection,
    handle_nobody_selection,
    handle_partner_selection,
    get_partners_text,
    check_private_chat
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏
other_work_router = Router()


class OtherWorkStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ–Ω—à–æ—é —Ä–æ–±–æ—Ç–æ—é"""
    partner_selection = State()  # –í–∏–±—ñ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    work_description = State()  # –û–ø–∏—Å —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏


@other_work_router.message(WorkStates.select_work_type, F.text == "üìù –Ü–Ω—à–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å")
async def start_other_work_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏"""
    await message.bot.send_chat_action(message.chat.id, "typing")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await init_partner_selection(state, "other_work")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    users = await get_all_approved_users()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    await message.answer(
        "üë• <b>–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏:</b>",
        reply_markup=kb.get_multiselect_partners_kb(users, message.from_user.id),
        parse_mode="HTML"
    )
    await state.set_state(OtherWorkStates.partner_selection)


@other_work_router.callback_query(OtherWorkStates.partner_selection, F.data == "select_nobody")
async def toggle_nobody_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É '–ù—ñ–∫–æ–≥–æ'"""
    await handle_nobody_selection(callback, state)


@other_work_router.callback_query(OtherWorkStates.partner_selection, F.data.startswith("select_partner_"))
async def toggle_partner_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await handle_partner_selection(callback, state)


@other_work_router.callback_query(OtherWorkStates.partner_selection, F.data == "confirm_partners")
async def confirm_other_work_partners(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    data = await state.get_data()
    selected_partners = data.get("selected_partners", [])
    nobody_selected = data.get("nobody_selected", False)

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await callback.message.delete()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await state.update_data(all_partners=selected_partners, nobody_selected=nobody_selected)

    # –ü–∏—Ç–∞—î–º–æ –æ–ø–∏—Å —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏
    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await callback.message.answer(
        "üìù <b>–û–ø–∏—à—ñ—Ç—å, —è–∫—É —Ä–æ–±–æ—Ç—É –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏:</b>",
        reply_markup=kb.menu_kb,
        parse_mode="HTML"
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    await state.set_state(OtherWorkStates.work_description)

    await callback.answer()


@other_work_router.callback_query(OtherWorkStates.partner_selection, F.data == "cancel_partners")
async def cancel_other_work_partners_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
    await callback.message.delete()
    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await callback.message.answer(
        "ü§ñ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:</b>",
        reply_markup=kb.work_type_kb,
        parse_mode="HTML"
    )
    await state.set_state(WorkStates.select_work_type)
    await callback.answer()


@other_work_router.message(OtherWorkStates.work_description)
async def process_other_work_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ–ø–∏—Å—É —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
    data = await state.get_data()
    description = message.text
    selected_partners = data.get("all_partners", [])
    nobody_selected = data.get("nobody_selected", False)

    if description == "üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É":
        await state.clear()
        await message.answer("üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>", reply_markup=kb.main_menu_kb, parse_mode="HTML")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–ø–∏—Å—É
    if not description:
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer(
            "‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.</b>",
            parse_mode="HTML"
        )
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—à—É —Ä–æ–±–æ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    main_partner_id = selected_partners[0] if selected_partners else None
    await add_other_work(
        user_id=message.from_user.id,
        partner_id=main_partner_id,
        description=description,
        all_partners=selected_partners
    )

    # –§–æ—Ä–º—É—î–º–æ –∑–≥–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_mention = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.id}"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    users = await get_all_approved_users()
    partners_text = get_partners_text(selected_partners, nobody_selected, users)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
    await message.bot.send_message(
        CHAT_ID,
        f"üìù <b>–Ü–ù–®–ê –†–û–ë–û–¢–ê –í–ò–ö–û–ù–ê–ù–ê</b> üìù\n\n"
        f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {user_mention}\n"
        f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–∏: {partners_text}\n"
        f"üïí –ß–∞—Å –∑–∞–ø–∏—Å—É: <b>{datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</b>\n\n"
        f"üìã <b>–û–ø–∏—Å —Ä–æ–±–æ—Ç–∏:</b> {description}",
        parse_mode="HTML"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.bot.send_chat_action(message.chat.id, "typing")
    await message.answer(
        "‚úÖ <b>–í–∞—à–∞ —Ä–æ–±–æ—Ç–∞ –±—É–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!</b>",
        reply_markup=kb.main_menu_kb,
        parse_mode="HTML"
    )

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    await state.clear()
