import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import keyboards as kb
from config import CHAT_ID
from handlers.work import WorkStates
from handlers.work.common import calculate_duration
from services.db import (
    get_all_approved_users,
    start_work_session,
    get_active_work_session,
    end_work_session,
    update_work_session_message_id
)
from utils.helpers import (
    init_partner_selection,
    handle_nobody_selection,
    handle_partner_selection,
    get_partners_text,
    check_private_chat,
    calculate_duration
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
sales_router = Router()


class SalesStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
    partner_selection = State()  # –í–∏–±—ñ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
    count_packages = State()  # –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    sales_amount = State()  # –í–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø—Ä–æ–¥–∞–∂—É


@sales_router.message(WorkStates.select_work_type, F.text.in_(["üí∞ –ü—Ä–æ–¥–∞–∂", "üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è"]))
async def start_sales_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –ø—Ä–æ–¥–∞–∂—É"""

    await message.bot.send_chat_action(message.chat.id, "typing")

    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if not check_private_chat(message):
        return

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await init_partner_selection(state, "sales")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    users = await get_all_approved_users()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    await message.answer(
        "üë• <b>–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:</b>",
        reply_markup=kb.get_multiselect_partners_kb(users, message.from_user.id),
        parse_mode="HTML"
    )
    await state.set_state(SalesStates.partner_selection)


@sales_router.callback_query(SalesStates.partner_selection, F.data == "select_nobody")
async def toggle_nobody_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É '–ù—ñ–∫–æ–≥–æ'"""
    await handle_nobody_selection(callback, state)


@sales_router.callback_query(SalesStates.partner_selection, F.data.startswith("select_partner_"))
async def toggle_partner_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await handle_partner_selection(callback, state)


@sales_router.callback_query(SalesStates.partner_selection, F.data == "confirm_partners")
async def confirm_partners(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    data = await state.get_data()
    selected_partners = data.get("selected_partners", [])
    nobody_selected = data.get("nobody_selected", False)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –æ–ø—Ü—ñ—é "–ù—ñ–∫–æ–≥–æ"
    if not selected_partners and not nobody_selected:
        await callback.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å '–ù—ñ–∫–æ–≥–æ'", show_alert=True)
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ä–æ–±–æ—Ç–∏
    work_type = data.get("work_type")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –ø—Ä–æ–¥–∞–∂—É
    main_partner_id = selected_partners[0] if selected_partners else None
    session_id = await start_work_session(
        user_id=callback.from_user.id,
        partner_id=main_partner_id,
        work_type=work_type,
        all_partners=selected_partners
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–µ—Å—ñ—ó —Ç–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await state.update_data(session_id=session_id, all_partners=selected_partners, nobody_selected=nobody_selected)

    # –§–æ—Ä–º—É—î–º–æ –∑–≥–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_mention = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.id}"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    users = await get_all_approved_users()
    partners_text = get_partners_text(selected_partners, nobody_selected, users)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç –∑ —Ä–æ–±–æ—Ç–æ—é
    message = await callback.bot.send_message(
        CHAT_ID,
        f"üí∞ <b>–†–û–ó–ü–û–ß–ê–¢–û –ó–ú–Ü–ù–£ –ü–†–û–î–ê–ñ–£</b> üí∞\n\n"
        f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {user_mention}\n"
        f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–∏: {partners_text}\n"
        f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</b>",
        parse_mode="HTML"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–∫—Ä—ñ–ø–ª—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏
    shift_message = await callback.message.answer(
        "üü¢ <b>–ê–ö–¢–ò–í–ù–ê –ó–ú–Ü–ù–ê –ü–†–û–î–ê–ñ–£</b>",
        reply_markup=kb.end_shift_sales_kb,
        parse_mode="HTML"
    )

    # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–æ—Ç–æ–º
    try:
        if callback.message.chat.type == "private":
            await shift_message.pin(disable_notification=True)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    await update_work_session_message_id(session_id, shift_message.message_id)

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await callback.message.delete()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
    await callback.message.answer(
        "‚úÖ <b>–í–∏ –ø–æ—á–∞–ª–∏ –∑–º—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É!</b>\n"
        "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É' –Ω–∞ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
        reply_markup=kb.main_menu_kb,
        parse_mode="HTML"
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    await state.set_state(WorkStates.work_in_progress)

    await callback.answer()


@sales_router.callback_query(SalesStates.partner_selection, F.data == "cancel_partners")
async def cancel_partners_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
    await callback.message.delete()
    await callback.message.answer(
        "ü§ñ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:</b>",
        reply_markup=kb.work_type_kb,
        parse_mode="HTML"
    )
    await state.set_state(WorkStates.select_work_type)
    await callback.answer()


@sales_router.callback_query(F.data == "end_shift_sales")
async def end_shift_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É
    active_session = await get_active_work_session(callback.from_user.id)

    if not active_session:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏.", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–º—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    if active_session.work_type != "sales":
        await callback.answer("–¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.", show_alert=True)
        return

    # –í—ñ–¥–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ
    try:
        if callback.message.chat.type == "private":
            await callback.message.unpin()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –ü–∏—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    await callback.message.answer(
        "üì¶ <b>–°–∫—ñ–ª—å–∫–∏ –ø–∞–∫–µ—Ç—ñ–≤ –≤–∏ –ø—Ä–æ–¥–∞–ª–∏?</b>\n"
        "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:",
        reply_markup=kb.menu_kb,
        parse_mode="HTML"
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–µ—Å—ñ—ó
    await state.update_data(session_id=active_session.id)

    # –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        "üî¥ <b>–ó–ú–Ü–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>",
        reply_markup=None,
        parse_mode="HTML"
    )

    await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤")

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∞–∫–µ—Ç—ñ–≤
    await state.set_state(SalesStates.count_packages)


@sales_router.message(SalesStates.count_packages)
async def process_package_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"""
    try:
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —á–∏—Å–ª–æ
        packages_count = int(message.text)

        if packages_count < 0:
            raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∫–∞–∑–∞–Ω–Ω—è —Å—É–º–∏ –ø—Ä–æ–¥–∞–∂—É
        await state.update_data(packages_count=packages_count)

        # –ü–∏—Ç–∞—î–º–æ —Å—É–º—É –ø—Ä–æ–¥–∞–∂—É
        await message.answer(
            "üí∞ <b>–Ø–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—Ä–æ–¥–∞–∂—É?</b>\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (—É –≥—Ä–∏–≤–Ω—è—Ö):",
            reply_markup=kb.menu_kb,
            parse_mode="HTML"
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å—É–º–∏ –ø—Ä–æ–¥–∞–∂—É
        await state.set_state(SalesStates.sales_amount)

    except ValueError:
        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
        await message.answer(
            "‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –ø–∞–∫–µ—Ç—ñ–≤.</b>",
            parse_mode="HTML"
        )
        return


@sales_router.message(SalesStates.sales_amount)
async def process_sales_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—É–º–∏ –ø—Ä–æ–¥–∞–∂—É"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
    data = await state.get_data()
    session_id = data.get("session_id")
    packages_count = data.get("packages_count")

    try:
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —á–∏—Å–ª–æ
        sales_amount = float(message.text)

        if sales_amount < 0:
            raise ValueError("–°—É–º–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é")

        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        session = await end_work_session(
            session_id=session_id,
            results=f"–ü—Ä–æ–¥–∞–Ω–æ {packages_count} –ø–∞–∫–µ—Ç—ñ–≤ –Ω–∞ —Å—É–º—É {sales_amount} –≥—Ä–Ω",
            packages_count=packages_count,
            sales_amount=sales_amount
        )

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏
        duration = calculate_duration(session.start_time)

        # –§–æ—Ä–º—É—î–º–æ –∑–≥–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_mention = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.id}"

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
        all_partners = data.get("all_partners", [])
        nobody_selected = data.get("nobody_selected", False)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
        users = await get_all_approved_users()
        partners_text = get_partners_text(all_partners, nobody_selected, users)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
        await message.bot.send_message(
            CHAT_ID,
            f"üí∞ <b>–ó–ú–Ü–ù–ê –ü–†–û–î–ê–ñ–£ –ó–ê–í–ï–†–®–ï–ù–ê</b> üí∞\n\n"
            f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {user_mention}\n"
            f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–∏: {partners_text}\n"
            f"üïí –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration}</b>\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ –ø–∞–∫–µ—Ç—ñ–≤: <b>{packages_count}</b>\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <b>{sales_amount} –≥—Ä–Ω</b>",
            parse_mode="HTML"
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(
            f"‚úÖ <b>–ó–º—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ –ø–∞–∫–µ—Ç—ñ–≤: <b>{packages_count}</b>\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <b>{sales_amount} –≥—Ä–Ω</b>\n"
            f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏: <b>{duration}</b>",
            reply_markup=kb.main_menu_kb,
            parse_mode="HTML"
        )

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()

    except ValueError:
        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
        await message.answer(
            "‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –ø—Ä–æ–¥–∞–∂—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ).</b>",
            parse_mode="HTML"
        )
        return
