import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

import keyboards as kb
from config import CHAT_ID
from handlers.work import WorkStates
from services.db import (
    get_active_work_session,
    end_work_session,
    get_all_approved_users
)
from utils.helpers import (
    check_private_chat,
    calculate_duration,
    get_partners_text
)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
def calculate_duration(start_time: datetime.datetime) -> str:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏"""
    now = datetime.datetime.now()
    duration = now - start_time
    hours, remainder = divmod(duration.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    if hours > 0:
        return f"{hours}–≥ {minutes}—Ö–≤"
    else:
        return f"{minutes}—Ö–≤"


def register_common_handlers(router: Router) -> None:
    """–†–µ—î—Å—Ç—Ä—É—î —Å–ø—ñ–ª—å–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ä–æ–±—ñ—Ç"""

    @router.message(F.text.in_(["ü§ñ –†–æ–±–æ—Ç–∞", "ü§ñ –û–±–ª—ñ–∫ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É"]))
    async def start_work_process(message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É —Ä–æ–±–æ—Ç–∏"""

        await message.bot.send_chat_action(message.chat.id, "typing")
        # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
        if not check_private_chat(message):
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∑–º—ñ–Ω–∞
        active_session = await get_active_work_session(message.from_user.id)
        if active_session:
            await message.answer(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–º—ñ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —ó—ó.",
                reply_markup=kb.main_menu_kb
            )
            return

        await message.answer(
            "ü§ñ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:</b>",
            reply_markup=kb.work_type_kb,
            parse_mode="HTML"
        )
        await state.set_state(WorkStates.select_work_type)

    @router.message(WorkStates.select_work_type, F.text.in_(["üîô –ù–∞–∑–∞–¥", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"]))
    async def back_to_main_menu(message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""

        await message.bot.send_chat_action(message.chat.id, "typing")
        # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
        if not check_private_chat(message):
            return

        await message.answer(
            "üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>",
            reply_markup=kb.main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()

    @router.message(
        WorkStates.select_work_type,
        ~F.text.in_([
            "üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ", "üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ —Å—É—à–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤",
            "üì¶ –ü–∞–∫—É–≤–∞–Ω–Ω—è", "üì¶ –ü–∞–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
            "üí∞ –ü—Ä–æ–¥–∞–∂", "üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è",
            "üìù –Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞", "üìù –Ü–Ω—à–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å",
            "üîô –ù–∞–∑–∞–¥", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"
        ])
    )
    async def unhandled_work_type(message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —Ç–∏–ø—É —Ä–æ–±–æ—Ç–∏ (–Ω–∞–π–Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)"""

        await message.bot.send_chat_action(message.chat.id, "typing")
        # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
        if not check_private_chat(message):
            return

        await message.answer(
            "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ä–æ–±–æ—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:",
            reply_markup=kb.work_type_kb
        )

    @router.message(WorkStates.work_in_progress)
    async def process_work_results(message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–±–æ—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏"""
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
        await message.bot.send_chat_action(message.chat.id, "typing")

        data = await state.get_data()
        session_id = data.get("session_id")

        if not session_id:
            await message.answer(
                "‚ùå <b>–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó.</b>\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å.",
                reply_markup=kb.main_menu_kb,
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Ä–æ–±–æ—Ç–∏
        active_session = await get_active_work_session(message.from_user.id)

        if not active_session:
            await message.answer(
                "‚ùå <b>–†–æ–±–æ—á—É —Å–µ—Å—ñ—é –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º.</b>",
                reply_markup=kb.main_menu_kb,
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –ù–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ä–æ–±–æ—Ç–∏
        work_type = active_session.work_type

        if work_type == "production":
            await handle_production_results(message, state, session_id, data, active_session)
        elif work_type == "packaging":
            await message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–∞–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏.",
                reply_markup=kb.main_menu_kb
            )
            return
        elif work_type == "sales":
            await message.answer(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–∞–∂—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∞ —Å—É–º—É –ø—Ä–æ–¥–∞–∂—É.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏.",
                reply_markup=kb.main_menu_kb
            )
            return
        else:
            # –Ø–∫—â–æ —Ç–∏–ø —Ä–æ–±–æ—Ç–∏ –Ω–µ "production", —Ü–µ –ø–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó
            await message.answer(
                f"‚ùì <b>–ù–µ–∑–Ω–∞–π–æ–º–∏–π —Ç–∏–ø —Ä–æ–±–æ—Ç–∏: {work_type}.</b>\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É.",
                reply_markup=kb.main_menu_kb,
                parse_mode="HTML"
            )
            return


async def handle_production_results(message: types.Message, state: FSMContext, session_id: int, data: dict,
                                    active_session):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞"""
    results = message.text

    await message.bot.send_chat_action(message.chat.id, "typing")

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é
    session = await end_work_session(
        session_id=session_id,
        results=results
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–µ—Å—ñ—è –Ω–µ —î None
    if not session:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó.</b>\n"
            "–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –±—É–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=kb.main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏
    duration = calculate_duration(session.start_time)

    # –§–æ—Ä–º—É—î–º–æ –∑–≥–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_mention = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.id}"

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    all_partners = data.get("all_partners", [])
    nobody_selected = data.get("nobody_selected", False)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    users = await get_all_approved_users()
    partners_text = get_partners_text(all_partners, nobody_selected, users)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
    await message.bot.send_message(
        CHAT_ID,
        f"üè≠ <b>–í–ò–†–û–ë–ù–ò–¶–¢–í–û –ó–ê–í–ï–†–®–ï–ù–û</b> üè≠\n\n"
        f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {user_mention}\n"
        f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–∏: {partners_text}\n"
        f"üïí –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration}</b>\n\n"
        f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b> {results}",
        parse_mode="HTML"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(
        f"‚úÖ <b>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n"
        f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏: <b>{duration}</b>",
        reply_markup=kb.main_menu_kb,
        parse_mode="HTML"
    )

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    await state.clear()

    return


# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = ["register_common_handlers"]
