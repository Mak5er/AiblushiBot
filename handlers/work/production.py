import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import keyboards as kb
from config import CHAT_ID
from handlers.work import WorkStates
from services.db import (
    get_all_approved_users,
    start_work_session,
    get_active_work_session,
    update_work_session_message_id
)
from utils.helpers import (
    init_partner_selection,
    handle_nobody_selection,
    handle_partner_selection,
    get_partners_text,
    check_private_chat
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
production_router = Router()


class ProductionStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º"""
    partner_selection = State()  # –í–∏–±—ñ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞


@production_router.message(WorkStates.select_work_type,
                           F.text.in_(["üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ", "üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ —Å—É—à–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"]))
async def start_production_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞"""
    await message.bot.send_chat_action(message.chat.id, "typing")

    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if not check_private_chat(message):
        return

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await init_partner_selection(state, "production")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    users = await get_all_approved_users()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    await message.answer(
        "üë• <b>–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:</b>",
        reply_markup=kb.get_multiselect_partners_kb(users, message.from_user.id),
        parse_mode="HTML"
    )
    await state.set_state(ProductionStates.partner_selection)


@production_router.callback_query(ProductionStates.partner_selection, F.data == "select_nobody")
async def toggle_nobody_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É '–ù—ñ–∫–æ–≥–æ'"""
    await handle_nobody_selection(callback, state)


@production_router.callback_query(ProductionStates.partner_selection, F.data.startswith("select_partner_"))
async def toggle_partner_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await handle_partner_selection(callback, state)


@production_router.callback_query(ProductionStates.partner_selection, F.data == "confirm_partners")
async def confirm_partners(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    data = await state.get_data()
    selected_partners = data.get("selected_partners", [])
    nobody_selected = data.get("nobody_selected", False)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –æ–ø—Ü—ñ—é "–ù—ñ–∫–æ–≥–æ"
    if not selected_partners and not nobody_selected:
        await callback.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å '–ù—ñ–∫–æ–≥–æ'", show_alert=True)
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ä–æ–±–æ—Ç–∏
    work_type = data.get("work_type")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
    main_partner_id = selected_partners[0] if selected_partners else None
    session_id = await start_work_session(
        user_id=callback.from_user.id,
        partner_id=main_partner_id,
        work_type=work_type,
        all_partners=selected_partners
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–µ—Å—ñ—ó —Ç–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await state.update_data(session_id=session_id, all_partners=selected_partners, nobody_selected=nobody_selected)

    # –§–æ—Ä–º—É—î–º–æ –∑–≥–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_mention = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.id}"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    users = await get_all_approved_users()
    partners_text = get_partners_text(selected_partners, nobody_selected, users)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç –∑ —Ä–æ–±–æ—Ç–æ—é
    message = await callback.bot.send_message(
        CHAT_ID,
        f"üè≠ <b>–ü–û–ß–ê–õ–û–°–Ø –í–ò–†–û–ë–ù–ò–¶–¢–í–û</b> üè≠\n\n"
        f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {user_mention}\n"
        f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–∏: {partners_text}\n"
        f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</b>",
        parse_mode="HTML"
    )

    # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏
    pinned_message = await callback.message.answer(
        f"üü¢ <b>–ó–ú–Ü–ù–ê –í–ò–†–û–ë–ù–ò–¶–¢–í–ê –ü–û–ß–ê–õ–ê–°–¨</b>\n"
        f"‚è± –ü–æ—á–∞—Ç–æ–∫: <b>{datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</b>",
        reply_markup=kb.end_shift_production_kb,
        parse_mode="HTML"
    )

    # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–æ—Ç–æ–º
    try:
        if callback.message.chat.type == "private":
            await pinned_message.pin(disable_notification=True)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    await update_work_session_message_id(session_id, pinned_message.message_id)

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    await callback.message.delete()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await callback.message.answer(
        "‚úÖ <b>–í–∏ –ø–æ—á–∞–ª–∏ –≤–∏—Ä–æ–±–ª—è—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç!</b>\n"
        "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É' –Ω–∞ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
        reply_markup=kb.main_menu_kb,
        parse_mode="HTML"
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    await state.set_state(WorkStates.work_in_progress)

    await callback.answer()


@production_router.callback_query(ProductionStates.partner_selection, F.data == "cancel_partners")
async def cancel_partners_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
    await callback.message.delete()
    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await callback.message.answer(
        "ü§ñ <b>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±–æ—Ç–∏:</b>",
        reply_markup=kb.work_type_kb,
        parse_mode="HTML"
    )
    await state.set_state(WorkStates.select_work_type)
    await callback.answer()


@production_router.callback_query(F.data == "end_shift_production")
async def end_shift_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É
    active_session = await get_active_work_session(callback.from_user.id)

    if not active_session:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏.", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–º—ñ–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
    if active_session.work_type != "production":
        await callback.answer("–¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞.", show_alert=True)
        return

    try:
        if callback.message.chat.type == "private":
            await callback.message.unpin()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –ü–∏—Ç–∞—î–º–æ, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∑–∞ –∑–º—ñ–Ω—É
    await callback.message.answer(
        "üìù <b>–û–ø–∏—à—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏:</b>",
        reply_markup=kb.menu_kb,
        parse_mode="HTML"
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–µ—Å—ñ—ó
    await state.update_data(session_id=active_session.id)

    # –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        "üî¥ <b>–ó–ú–Ü–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>",
        reply_markup=None,
        parse_mode="HTML"
    )

    await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞—à–æ—ó —Ä–æ–±–æ—Ç–∏")

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–±–æ—Ç–∏
    await state.set_state(WorkStates.work_in_progress)
