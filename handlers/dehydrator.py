import datetime
import re

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards as kb
from services.db import is_user_approved, start_drying, is_dehydrator_busy, get_dehydrator_session
from utils.helpers import check_private_chat

dehydrator_router = Router()


class DryingSetup(StatesGroup):
    selecting_dehydrator = State()
    setting_time = State()


@dehydrator_router.message(F.text.in_(["üçá –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∏", "üçá –ö–µ—Ä—É–≤–∞–Ω–Ω—è –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞–º–∏"]))
async def show_dehydrators(message: types.Message, state: FSMContext):
    if not check_private_chat(message):
        return

    user_id = message.from_user.id
    if not await is_user_approved(user_id):
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.</b>", parse_mode="HTML")
        return
    await state.set_state(DryingSetup.selecting_dehydrator)
    await message.bot.send_chat_action(message.chat.id, "typing")
    await message.answer("üîç <b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞:</b>", reply_markup=kb.dehydrators_with_menu_kb,
                         parse_mode="HTML")


@dehydrator_router.message(DryingSetup.selecting_dehydrator)
async def select_dehydrator(message: types.Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, "typing")


    if message.chat.type != "private":
        return

    user_id = message.from_user.id
    if not await is_user_approved(user_id):
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.</b>", parse_mode="HTML")
        return

    if message.text == "üè† –ú–µ–Ω—é" or message.text == "üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É":
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>", reply_markup=kb.main_menu_kb, parse_mode="HTML")
        await state.clear()
        return

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–º–µ—Ä–∞ –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞
        dehydrator_pattern = re.compile(r'‚Ññ?(\d+)')
        match = dehydrator_pattern.search(message.text)

        if match:
            dehydrator_id = int(match.group(1))
        else:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω–∏–π –Ω–æ–º–µ—Ä, —à—É–∫–∞—î–º–æ –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É —Å–ª–æ–≤—ñ
            words = message.text.split()
            if words:
                try:
                    dehydrator_id = int(words[-1])
                except ValueError:
                    raise ValueError("–ù–æ–º–µ—Ä –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                raise ValueError("–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        if dehydrator_id not in [1, 2, 3]:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ –Ω–æ–º–µ—Ä–∏ –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä—ñ–≤
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer("‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä –∑—ñ —Å–ø–∏—Å–∫—É!</b>", parse_mode="HTML")
            return

        if await is_dehydrator_busy(dehydrator_id):
            session_data = await get_dehydrator_session(dehydrator_id)
            if session_data:
                duration_hours = int((session_data.finish_time - session_data.start_time).total_seconds() / 3600)

                await message.bot.send_chat_action(message.chat.id, "typing")
                await message.answer(
                    f"‚ö†Ô∏è <b>–î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä {dehydrator_id} –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç–∏–π!</b>\n\n"
                    f"üïí –í–∫–ª—é—á–µ–Ω–∏–π –æ: <b>{session_data.start_time.strftime('%H:%M')}</b>\n"
                    f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration_hours} –≥–æ–¥.</b>\n"
                    f"üèÅ –ë—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–æ: <b>{session_data.finish_time.strftime('%H:%M')}</b>",
                    parse_mode="HTML",
                    reply_markup=kb.dehydrators_with_menu_kb
                )
                return

        await state.update_data(dehydrator_id=dehydrator_id)
        await state.set_state(DryingSetup.setting_time)
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer(
            f"‚úÖ <b>–í–∏ –æ–±—Ä–∞–ª–∏ –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä {dehydrator_id}</b>\n\n"
            f"‚è± <b>–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å—É—à–∫–∏:</b>",
            reply_markup=kb.time_input_kb,
            parse_mode="HTML"
        )
    except (ValueError, IndexError):
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä –∑—ñ —Å–ø–∏—Å–∫—É!</b>", parse_mode="HTML")


@dehydrator_router.message(DryingSetup.setting_time, lambda message: message.text.startswith("‚è± "))
async def handle_time_button(message: types.Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, "typing")

    user_id = message.from_user.id
    if not await is_user_approved(user_id):
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.</b>", parse_mode="HTML")
        return

    if message.chat.type != "private":
        return

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É —á–∏—Å–ª–∞ –≥–æ–¥–∏–Ω
        time_pattern = re.compile(r'‚è±\s+(\d+)')
        match = time_pattern.search(message.text)

        if match:
            hours = int(match.group(1))
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∏—Å–ª–∞, —è–∫—â–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            time_text = message.text.replace("‚è± ", "").strip()
            hours = int(time_text.split()[0])  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ (—á–∏—Å–ª–æ)

        if hours <= 0:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer("‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω.</b>", parse_mode="HTML")
            return

        data = await state.get_data()
        dehydrator_id = data.get('dehydrator_id')

        try:
            # –ü–µ—Ä–µ–¥–∞—î–º–æ –≥–æ–¥–∏–Ω–∏ –Ω–∞–ø—Ä—è–º—É, –∞ –Ω–µ —Ö–≤–∏–ª–∏–Ω–∏
            finish_time = await start_drying(dehydrator_id, hours, message.bot, user_id)
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer(
                f"‚úÖ <b>–°–£–®–ö–ê –†–û–ó–ü–û–ß–ê–¢–ê!</b>\n\n"
                f"üîπ –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä: <b>‚Ññ{dehydrator_id}</b>\n"
                f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{datetime.datetime.now().strftime('%H:%M')}</b>\n"
                f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{hours} –≥–æ–¥.</b>\n"
                f"üèÅ –ó–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –æ: <b>{finish_time.strftime('%H:%M')}</b>",
                parse_mode="HTML",
                reply_markup=kb.main_menu_kb
            )
            await state.clear()

        except ValueError as e:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer(f"‚ö†Ô∏è <b>{str(e)}</b>", parse_mode="HTML")
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer("üîç <b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞:</b>", reply_markup=kb.dehydrators_with_menu_kb,
                                 parse_mode="HTML")
            await state.set_state(DryingSetup.selecting_dehydrator)

    except ValueError:
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer("‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω.</b>", parse_mode="HTML")


@dehydrator_router.message(DryingSetup.setting_time, F.text.in_(["üîô –ù–∞–∑–∞–¥", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"]))
async def back_to_dehydrator_selection(message: types.Message, state: FSMContext):
    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if message.chat.type != "private":
        return

    await state.set_state(DryingSetup.selecting_dehydrator)
    await message.bot.send_chat_action(message.chat.id, "typing")
    await message.answer("üîç <b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞:</b>", reply_markup=kb.dehydrators_with_menu_kb,
                         parse_mode="HTML")


@dehydrator_router.message(DryingSetup.setting_time, F.text.in_(["üè† –ú–µ–Ω—é", "üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]))
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, "typing")

    if message.chat.type != "private":
        return

    await message.answer("üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>", reply_markup=kb.main_menu_kb, parse_mode="HTML")
    await state.clear()


@dehydrator_router.message(DryingSetup.setting_time)
async def process_time_input(message: types.Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, "typing")

    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if message.chat.type != "private":
        return

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–Ω–æ–ø–æ–∫, —è–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Å–∏–º–≤–æ–ª—É ‚è±
    if message.text.startswith("‚è± "):
        return await handle_time_button(message, state)

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —á–∞—Å—É
        # –®—É–∫–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç "X –≥–æ–¥–∏–Ω(–∏)"
        hours_pattern = re.compile(r'(\d+)\s*(?:–≥–æ–¥(?:–∏–Ω)?|h)')
        hours_match = hours_pattern.search(message.text)

        # –®—É–∫–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç "X —Ö–≤–∏–ª–∏–Ω"
        minutes_pattern = re.compile(r'(\d+)\s*(?:—Ö–≤(?:–∏–ª–∏–Ω)?|m)')
        minutes_match = minutes_pattern.search(message.text)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω
        drying_hours = 0

        if hours_match:
            drying_hours += int(hours_match.group(1))

        if minutes_match:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ö–≤–∏–ª–∏–Ω–∏ –≤ –≥–æ–¥–∏–Ω–∏ (—è–∫ –¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ)
            drying_hours += int(minutes_match.group(1)) / 60

        # –Ø–∫—â–æ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–∏ –Ω—ñ –≥–æ–¥–∏–Ω –Ω—ñ —Ö–≤–∏–ª–∏–Ω, –ø—Ä–æ–±—É—î–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É–≤–∞—Ç–∏ —è–∫ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–≥–æ–¥–∏–Ω)
        if not hours_match and not minutes_match:
            try:
                # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —è–∫ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
                drying_hours = int(message.text.strip())  # –í–≤–∞–∂–∞—î–º–æ —â–æ —Ü–µ –≥–æ–¥–∏–Ω–∏
            except ValueError:
                await message.bot.send_chat_action(message.chat.id, "typing")
                await message.answer(
                    "‚ö†Ô∏è <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É.</b>\n\n"
                    "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                    "‚Ä¢ <code>5</code> (–≥–æ–¥–∏–Ω)\n"
                    "‚Ä¢ <code>5 –≥–æ–¥–∏–Ω</code>\n"
                    "‚Ä¢ <code>30 —Ö–≤–∏–ª–∏–Ω</code> (–±—É–¥–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –≥–æ–¥–∏–Ω–∏)\n"
                    "–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.",
                    parse_mode="HTML"
                )
                return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —á–∞—Å –±—ñ–ª—å—à–µ –Ω—É–ª—è
        if drying_hours <= 0:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer("‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—ñ–π —á–∞—Å —Å—É—à—ñ–Ω–Ω—è.</b>", parse_mode="HTML")
            return

        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –≤–≤–µ–¥–µ–Ω–æ–≥–æ —á–∞—Å—É
        data = await state.get_data()
        dehydrator_id = data.get('dehydrator_id')

        try:
            # –ü–µ—Ä–µ–¥–∞—î–º–æ –≥–æ–¥–∏–Ω–∏ –Ω–∞–ø—Ä—è–º—É
            finish_time = await start_drying(dehydrator_id, drying_hours, message.bot, user_id=message.from_user.id)

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É (–≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏)
            hours = int(drying_hours)
            minutes = int((drying_hours - hours) * 60)

            duration_text = f"{hours} –≥–æ–¥."
            if minutes > 0:
                duration_text += f" {minutes} —Ö–≤."

            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer(
                f"‚úÖ <b>–°–£–®–ö–ê –†–û–ó–ü–û–ß–ê–¢–ê!</b>\n\n"
                f"üîπ –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä: <b>‚Ññ{dehydrator_id}</b>\n"
                f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{datetime.datetime.now().strftime('%H:%M')}</b>\n"
                f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration_text}</b>\n"
                f"üèÅ –ó–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –æ: <b>{finish_time.strftime('%H:%M')}</b>",
                parse_mode="HTML",
                reply_markup=kb.main_menu_kb
            )
            await state.clear()

        except ValueError as e:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer(f"‚ö†Ô∏è <b>{str(e)}</b>", parse_mode="HTML")
            await message.bot.send_chat_action(message.chat.id, "typing")
            await message.answer("üîç <b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞:</b>", reply_markup=kb.dehydrators_with_menu_kb,
                                 parse_mode="HTML")
            await state.set_state(DryingSetup.selecting_dehydrator)

    except Exception as e:
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —á–∞—Å—É:</b> {str(e)}\n\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.",
            parse_mode="HTML"
        )
