import calendar
import datetime
from typing import Dict, List, Tuple, Optional, Union

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select

import keyboards as kb
from services.db import get_available_months, get_all_work_sessions, \
    get_all_other_works, get_available_months_all_users, get_user_by_id, WorkPartner, OtherWorkPartner, async_session
from utils.helpers import format_time

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ
reports_router = Router()


class ReportStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—é"""
    select_month = State()  # –í–∏–±—ñ—Ä –º—ñ—Å—è—Ü—è –¥–ª—è –∑–≤—ñ—Ç—É
    choosing_report_type = State()
    waiting_for_month = State()


@reports_router.message(F.text.in_(["üìä –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å", "üìä –ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ"]))
async def start_report_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ"""
    await message.bot.send_chat_action(message.chat.id, "typing")


    # –ù–µ —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if message.chat.type != "private":
        return

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—è—Ü—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        available_months = await get_available_months_all_users()

        if not available_months:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            await message.answer(
                "‚ùå <b>–£ —Å–∏—Å—Ç–µ–º—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ä–æ–±–æ—á–∏—Ö —Å–µ—Å—ñ–π.</b>\n"
                "–î–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
                reply_markup=kb.main_menu_kb,
                parse_mode="HTML"
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º—ñ—Å—è—Ü—è–º–∏
        months_kb = get_months_keyboard(available_months)

        await message.answer(
            "üìÖ <b>–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö:</b>",
            reply_markup=months_kb,
            parse_mode="HTML"
        )
        await state.set_state(ReportStates.select_month)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∑–≤—ñ—Ç—ñ–≤: {str(e)}")
        print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e)}")
        import traceback
        traceback.print_exc()

        await message.answer(
            f"‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—è—Ü—ñ–≤:</b>\n"
            f"<code>{str(e)}</code>\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=kb.main_menu_kb
        )


@reports_router.message(ReportStates.select_month)
async def process_month_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è –¥–ª—è –∑–≤—ñ—Ç—É"""

    await message.bot.send_chat_action(message.chat.id, "typing")

    month_text = message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–∞—î –±—É—Ç–∏ "–ú—ñ—Å—è—Ü—å YYYY")
    if not month_text or " " not in month_text:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—è—Ü—ñ
        user_id = message.from_user.id
        available_months = await get_available_months(user_id)

        await message.answer(
            "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è.</b>\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.",
            reply_markup=get_months_keyboard(available_months),
            parse_mode="HTML"
        )
        return

    month_name, year_str = month_text.split(" ", 1)
    try:
        year = int(year_str)
        month = get_month_number(month_name)

        if month == 0:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—è—Ü—è")

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–±–æ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –º—ñ—Å—è—Ü—å
        await generate_monthly_report(message, month, year)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer(
            "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>",
            reply_markup=kb.main_menu_kb,
            parse_mode="HTML"
        )
        await state.clear()

    except ValueError:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—è—Ü—ñ
        user_id = message.from_user.id
        available_months = await get_available_months(user_id)

        await message.answer(
            "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.</b>\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.",
            reply_markup=get_months_keyboard(available_months),
            parse_mode="HTML"
        )


@reports_router.message(ReportStates.select_month, F.text.in_(["üîô –ù–∞–∑–∞–¥", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"]))
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è"""
    await message.bot.send_chat_action(message.chat.id, "typing")


    if message.chat.type != "private":
        return

    await message.answer(
        "üëã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>",
        reply_markup=kb.main_menu_kb,
        parse_mode="HTML"
    )
    await state.clear()


async def generate_monthly_report(message: types.Message, month: int, year: int):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–≤—ñ—Ç –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –º—ñ—Å—è—Ü—å –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    start_date, end_date = get_month_range(month, year)
    await message.bot.send_chat_action(message.chat.id, "typing")



    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        await message.answer("üîç <b>–ü–æ—à—É–∫ –¥–∞–Ω–∏—Ö...</b>", parse_mode="HTML")
        await message.bot.send_chat_action(message.chat.id, "typing") 
        all_work_sessions = await get_all_work_sessions(start_date, end_date)
        all_other_works = await get_all_other_works(start_date, end_date)


        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        await message.answer("‚öôÔ∏è <b>–ê–Ω–∞–ª—ñ–∑—É—é –¥–∞–Ω—ñ...</b>", parse_mode="HTML")
        await message.bot.send_chat_action(message.chat.id, "typing")
        report_data = await analyze_all_work_data(all_work_sessions, all_other_works)


        # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏
        month_name = get_month_name(month)
        totals = report_data["totals"]

        await message.answer("üìù <b>–§–æ—Ä–º—É—é –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç...</b>", parse_mode="HTML")
        report = f"üìä <b>–ó–≤—ñ—Ç –∑–∞ {month_name} {year} - –ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏</b>\n\n"
        report += f"üìã <b>–ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏:</b>\n"
        report += f"üè≠ <b>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ:</b> {format_time(totals['production']['time'])}\n"
        report += f"üì¶ <b>–ü–∞–∫—É–≤–∞–Ω–Ω—è:</b> {format_time(totals['packaging']['time'])}, {totals['packaging']['packages']} –ø–∞–∫–µ—Ç—ñ–≤\n"
        report += f"üí∞ <b>–ü—Ä–æ–¥–∞–∂:</b> {format_time(totals['sales']['time'])}, {totals['sales']['packages']} –ø–∞–∫–µ—Ç—ñ–≤, {totals['sales']['amount']} –≥—Ä–Ω\n"
        report += f"üìù <b>–Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞:</b> {format_time(totals['other_work']['time'])}\n\n"

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        await message.answer(report, parse_mode="HTML")

        # –ì–æ—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
        await message.answer("üìä <b>–§–æ—Ä–º—É—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö...</b>", parse_mode="HTML")
        users_report = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {month_name} {year} –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö</b>\n\n"

        for user_id, user_data in report_data["users"].items():
            user = await get_user_by_id(user_id)
            if not user:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

            user_name = f"@{user.username}" if user.username else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"
            users_report += f"üë§ <b>{user_name}</b>\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
            production = user_data["production"]
            production_time = production['host_time'] + production['partner_time']
            if production_time > 0:
                users_report += f"üè≠ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ: {format_time(production_time)}\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫—É–≤–∞–Ω–Ω—è
            packaging = user_data["packaging"]
            packaging_time = packaging['host_time'] + packaging['partner_time']
            if packaging_time > 0:
                users_report += f"üì¶ –ü–∞–∫—É–≤–∞–Ω–Ω—è: {format_time(packaging_time)}"
                if packaging['packages'] > 0:
                    users_report += f", {packaging['packages']} –ø–∞–∫–µ—Ç—ñ–≤"
                users_report += "\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
            sales = user_data["sales"]
            sales_time = sales['host_time'] + sales['partner_time']
            if sales_time > 0:
                users_report += f"üí∞ –ü—Ä–æ–¥–∞–∂: {format_time(sales_time)}"
                if sales['packages'] > 0:
                    users_report += f", {sales['packages']} –ø–∞–∫–µ—Ç—ñ–≤"
                if sales['amount'] > 0:
                    users_report += f", {sales['amount']} –≥—Ä–Ω"
                users_report += "\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω—à—É —Ä–æ–±–æ—Ç—É
            other_work = user_data["other_work"]
            if other_work['time'] > 0:
                users_report += f"üìù –Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞: {format_time(other_work['time'])}\n"

            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å
            total_time = production_time + packaging_time + sales_time + other_work['time']
            users_report += f"‚è± <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å:</b> {format_time(total_time)}\n\n"

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
        if len(users_report) > 4096:
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –∑–≤—ñ—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            for i in range(0, len(users_report), 4000):
                part = users_report[i:i+4000]
                await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(users_report, parse_mode="HTML")

    except Exception as e:
        print(f"Error generating monthly report: {str(e)}")
        await message.answer(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É:</b> {str(e)}", parse_mode="HTML")


def analyze_work_data(work_sessions: List, other_works: List) -> Dict:
    """–ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–≤—ñ—Ç—É"""
    report = {
        "production": {"host_time": 0, "partner_time": 0, "sessions": []},
        "packaging": {"host_time": 0, "partner_time": 0, "sessions": [], "packages": 0},
        "sales": {"host_time": 0, "partner_time": 0, "sessions": [], "packages": 0, "amount": 0},
        "other_work": {"time": 0, "works": []}
    }

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏
    for session in work_sessions:
        if not session.end_time:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–µ—Å—ñ—ó

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
        duration_minutes = (session.end_time - session.start_time).total_seconds() / 60

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –≥–æ–ª–æ–≤–Ω–∏–º –∞–±–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
        try:
            is_host = session.user_id == session.requested_by
        except (AttributeError, TypeError):
            # –Ø–∫—â–æ –ø–æ–ª–µ requested_by –≤—ñ–¥—Å—É—Ç–Ω—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ user_id
            is_host = True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–º

        work_type = session.work_type

        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ä–æ–±–æ—Ç–∏
        if work_type == "production":
            if is_host:
                report["production"]["host_time"] += duration_minutes
            else:
                report["production"]["partner_time"] += duration_minutes

            # –î–æ–¥–∞—î–º–æ —Å–µ—Å—ñ—é –¥–æ —Å–ø–∏—Å–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            work_date = session.start_time.date()
            report["production"]["sessions"].append({
                "date": work_date.strftime("%d.%m.%Y"),
                "duration": duration_minutes,
                "results": session.results if session.results else ""
            })

        elif work_type == "packaging":
            if is_host:
                report["packaging"]["host_time"] += duration_minutes
            else:
                report["packaging"]["partner_time"] += duration_minutes

            # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤
            report["packaging"]["packages"] += session.packages_count if session.packages_count else 0

            # –î–æ–¥–∞—î–º–æ —Å–µ—Å—ñ—é –¥–æ —Å–ø–∏—Å–∫—É
            work_date = session.start_time.date()
            report["packaging"]["sessions"].append({
                "date": work_date.strftime("%d.%m.%Y"),
                "duration": duration_minutes,
                "packages": session.packages_count if session.packages_count else 0
            })

        elif work_type == "sales":
            if is_host:
                report["sales"]["host_time"] += duration_minutes
            else:
                report["sales"]["partner_time"] += duration_minutes

            # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∞ —Å—É–º—É –ø—Ä–æ–¥–∞–∂—É
            report["sales"]["packages"] += session.packages_count if session.packages_count else 0
            report["sales"]["amount"] += session.sales_amount if session.sales_amount else 0

            # –î–æ–¥–∞—î–º–æ —Å–µ—Å—ñ—é –¥–æ —Å–ø–∏—Å–∫—É
            work_date = session.start_time.date()
            report["sales"]["sessions"].append({
                "date": work_date.strftime("%d.%m.%Y"),
                "duration": duration_minutes,
                "packages": session.packages_count if session.packages_count else 0,
                "amount": session.sales_amount if session.sales_amount else 0
            })

    # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ —Ä–æ–±–æ—Ç–∏
    for work in other_works:
        work_date = work.created_at.date()
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏
        work_duration = work.duration if work.duration else 0
        report["other_work"]["time"] += work_duration

        # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å —Ä–æ–±–æ—Ç–∏
        report["other_work"]["works"].append({
            "date": work_date.strftime("%d.%m.%Y"),
            "description": work.description,
            "duration": work.duration if work.duration else 0
        })

    return report


def format_report(report_data: Dict, month: int, year: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –∑–≤—ñ—Ç—É —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    month_name = get_month_name(month)

    report = f"üìä <b>–ó–≤—ñ—Ç –∑–∞ {month_name} {year}</b>\n\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
    production = report_data["production"]
    report += f"üè≠ <b>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ:</b>\n"
    report += f"   - –í—Å—å–æ–≥–æ: {format_time(production['host_time'] + production['partner_time'])}\n\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫—É–≤–∞–Ω–Ω—è
    packaging = report_data["packaging"]
    report += f"üì¶ <b>–ü–∞–∫—É–≤–∞–Ω–Ω—è:</b>\n"
    report += f"   - –í—Å—å–æ–≥–æ: {format_time(packaging['host_time'] + packaging['partner_time'])}\n"
    if packaging["packages"] > 0:
        report += f"   - –ü–∞–∫–µ—Ç—ñ–≤: {packaging['packages']}\n\n"
    else:
        report += "\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
    sales = report_data["sales"]
    report += f"üí∞ <b>–ü—Ä–æ–¥–∞–∂:</b>\n"
    report += f"   - –í—Å—å–æ–≥–æ: {format_time(sales['host_time'] + sales['partner_time'])}\n"
    if sales["packages"] > 0:
        report += f"   - –ü—Ä–æ–¥–∞–Ω–æ –ø–∞–∫–µ—Ç—ñ–≤: {sales['packages']}\n"
    if sales["amount"] > 0:
        report += f"   - –°—É–º–∞ –ø—Ä–æ–¥–∞–∂—É: {sales['amount']} –≥—Ä–Ω.\n\n"
    else:
        report += "\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω—à—É —Ä–æ–±–æ—Ç—É
    other_work = report_data["other_work"]
    report += f"üìù <b>–Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞:</b>\n"
    report += f"   - –í—Å—å–æ–≥–æ: {format_time(other_work['time'])}\n"

    if other_work["works"]:
        report += "   - –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n"
        for work in other_work["works"]:
            report += f"     ‚Ä¢ {work['description']}\n"

    return report


def get_months_keyboard(available_months: List[Tuple[int, int]]) -> types.ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –º—ñ—Å—è—Ü—è–º–∏
    
    Args:
        available_months: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–º—ñ—Å—è—Ü—å, —Ä—ñ–∫)
    """
    # –°–æ—Ä—Ç—É—î–º–æ –º—ñ—Å—è—Ü—ñ –≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    sorted_months = sorted(available_months, key=lambda x: (x[1], x[0]), reverse=True)

    buttons = []
    for month, year in sorted_months:
        month_name = get_month_name(month)
        buttons.append([KeyboardButton(text=f"{month_name} {year}")])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_month_number(month_name: str) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–º–µ—Ä –º—ñ—Å—è—Ü—è –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
    months = {
        "–°—ñ—á–µ–Ω—å": 1, "–õ—é—Ç–∏–π": 2, "–ë–µ—Ä–µ–∑–µ–Ω—å": 3, "–ö–≤—ñ—Ç–µ–Ω—å": 4,
        "–¢—Ä–∞–≤–µ–Ω—å": 5, "–ß–µ—Ä–≤–µ–Ω—å": 6, "–õ–∏–ø–µ–Ω—å": 7, "–°–µ—Ä–ø–µ–Ω—å": 8,
        "–í–µ—Ä–µ—Å–µ–Ω—å": 9, "–ñ–æ–≤—Ç–µ–Ω—å": 10, "–õ–∏—Å—Ç–æ–ø–∞–¥": 11, "–ì—Ä—É–¥–µ–Ω—å": 12
    }
    return months.get(month_name, 0)


def get_month_name(month_number: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑–∞ –π–æ–≥–æ –Ω–æ–º–µ—Ä–æ–º"""
    months = {
        1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
        5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
        9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
    }
    return months.get(month_number, "")


def get_month_range(month: int, year: int) -> Tuple[datetime.datetime, datetime.datetime]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å –º—ñ—Å—è—Ü—è"""
    first_day = datetime.datetime(year, month, 1)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è
    last_day = datetime.datetime(year, month, calendar.monthrange(year, month)[1])
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞ –∫—ñ–Ω–µ—Ü—å –¥–Ω—è
    last_day = last_day.replace(hour=23, minute=59, second=59)
    
    return first_day, last_day


async def analyze_all_work_data(all_work_sessions: List, all_other_works: List) -> Dict:
    """–ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–≤—ñ—Ç—É"""
    report = {
        "totals": {
            "production": {"time": 0, "sessions": 0},
            "packaging": {"time": 0, "sessions": 0, "packages": 0},
            "sales": {"time": 0, "sessions": 0, "packages": 0, "amount": 0},
            "other_work": {"time": 0, "works": 0}
        },
        "users": {}
    }

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    unique_users = set()
    for session in all_work_sessions:
        unique_users.add(session.user_id)
    
    for work in all_other_works:
        unique_users.add(work.user_id)

    for user_id in unique_users:
        report["users"][user_id] = {
            "production": {"host_time": 0, "partner_time": 0},
            "packaging": {"host_time": 0, "partner_time": 0, "packages": 0},
            "sales": {"host_time": 0, "partner_time": 0, "packages": 0, "amount": 0},
            "other_work": {"time": 0}
        }

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏
    for session in all_work_sessions:
        if not session.end_time:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–µ—Å—ñ—ó

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
        duration_minutes = (session.end_time - session.start_time).total_seconds() / 60
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–±–æ—Ç–∏
        work_type = session.work_type
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = session.user_id
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –≥–æ–ª–æ–≤–Ω–∏–º –∞–±–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
        try:
            is_host = session.user_id == session.requested_by
        except (AttributeError, TypeError):
            is_host = True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–º

        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ä–æ–±–æ—Ç–∏
        if work_type == "production":
            # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤
            report["totals"]["production"]["time"] += duration_minutes
            report["totals"]["production"]["sessions"] += 1
            
            # –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if is_host:
                report["users"][user_id]["production"]["host_time"] += duration_minutes
            else:
                report["users"][user_id]["production"]["partner_time"] += duration_minutes
        
        elif work_type == "packaging":
            # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤
            report["totals"]["packaging"]["time"] += duration_minutes
            report["totals"]["packaging"]["sessions"] += 1
            packages_count = session.packages_count if session.packages_count else 0
            report["totals"]["packaging"]["packages"] += packages_count
            
            # –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if is_host:
                report["users"][user_id]["packaging"]["host_time"] += duration_minutes
            else:
                report["users"][user_id]["packaging"]["partner_time"] += duration_minutes
            
            # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ)
            if is_host:
                report["users"][user_id]["packaging"]["packages"] += packages_count
        
        elif work_type == "sales":
            # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤
            report["totals"]["sales"]["time"] += duration_minutes
            report["totals"]["sales"]["sessions"] += 1
            packages_count = session.packages_count if session.packages_count else 0
            sales_amount = session.sales_amount if session.sales_amount else 0
            report["totals"]["sales"]["packages"] += packages_count
            report["totals"]["sales"]["amount"] += sales_amount
            
            # –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if is_host:
                report["users"][user_id]["sales"]["host_time"] += duration_minutes
            else:
                report["users"][user_id]["sales"]["partner_time"] += duration_minutes
            
            # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∞ —Å—É–º—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ)
            if is_host:
                report["users"][user_id]["sales"]["packages"] += packages_count
                report["users"][user_id]["sales"]["amount"] += sales_amount

    # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ —Ä–æ–±–æ—Ç–∏
    for work in all_other_works:
        user_id = work.user_id
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏
        work_duration = work.duration if work.duration else 0
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤
        report["totals"]["other_work"]["time"] += work_duration
        report["totals"]["other_work"]["works"] += 1
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id in report["users"]:
            report["users"][user_id]["other_work"]["time"] += work_duration

    return report


def format_all_users_report(report_data: Dict, month: int, year: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –∑–≤—ñ—Ç—É –ø–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    Args:
        report_data: –î–∞–Ω—ñ –∑–≤—ñ—Ç—É
        month: –ú—ñ—Å—è—Ü—å
        year: –†—ñ–∫
        
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    users_data = report_data["users_data"]
    totals = report_data["totals"]

    month_name = get_month_name(month)

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
    def format_time(minutes: float) -> str:
        hours = int(minutes // 60)
        mins = int(minutes % 60)
        if hours > 0:
            return f"{hours} –≥–æ–¥. {mins} —Ö–≤."
        else:
            return f"{mins} —Ö–≤."

    report = f"üìä <b>–ó–≤—ñ—Ç –∑–∞ {month_name} {year} - –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n\n"

    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏
    report += f"üìã <b>–ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏:</b>\n"
    report += f"üè≠ <b>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ:</b> {format_time(totals['production']['time'])}\n"

    report += f"üì¶ <b>–ü–∞–∫—É–≤–∞–Ω–Ω—è:</b> {format_time(totals['packaging']['time'])}\n"
    if totals["packaging"]["packages"] > 0:
        report += f"   - –í—Å—å–æ–≥–æ –ø–∞–∫–µ—Ç—ñ–≤: {totals['packaging']['packages']}\n"

    report += f"üí∞ <b>–ü—Ä–æ–¥–∞–∂:</b> {format_time(totals['sales']['time'])}\n"
    if totals["sales"]["packages"] > 0:
        report += f"   - –í—Å—å–æ–≥–æ –ø–∞–∫–µ—Ç—ñ–≤ –ø—Ä–æ–¥–∞–Ω–æ: {totals['sales']['packages']}\n"
    if totals["sales"]["amount"] > 0:
        report += f"   - –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {totals['sales']['amount']} –≥—Ä–Ω.\n"

    report += f"üìù <b>–Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞:</b> {format_time(totals['other_work']['time'])}\n"
    report += f"‚è± <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å:</b> {format_time(totals['total_time'])}\n\n"

    # –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —ñ–º–µ–Ω–∞–º–∏
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['username'])

    # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    for user_id, user_data in sorted_users:
        username = user_data["username"]
        report += f"üë§ <b>{username}</b>\n"

        # –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
        production = user_data["production"]
        prod_total = production['host_time'] + production['partner_time']
        if prod_total > 0:
            report += f"üè≠ <b>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ:</b> {format_time(prod_total)}\n"

        # –ü–∞–∫—É–≤–∞–Ω–Ω—è
        packaging = user_data["packaging"]
        pack_total = packaging['host_time'] + packaging['partner_time']
        if pack_total > 0:
            report += f"üì¶ <b>–ü–∞–∫—É–≤–∞–Ω–Ω—è:</b> {format_time(pack_total)}\n"

        # –ü—Ä–æ–¥–∞–∂
        sales = user_data["sales"]
        sales_total = sales['host_time'] + sales['partner_time']
        if sales_total > 0:
            report += f"üí∞ <b>–ü—Ä–æ–¥–∞–∂:</b> {format_time(sales_total)}\n"

        # –Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞
        other_work = user_data["other_work"]
        if other_work["time"] > 0:
            report += f"üìù <b>–Ü–Ω—à–∞ —Ä–æ–±–æ—Ç–∞:</b> {format_time(other_work['time'])}\n"
            if other_work["works"]:
                report += "   - –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n"
                for work in other_work["works"]:
                    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–∞—Ç—É, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–∞ –æ–ø–∏—Å
                    work_time = work["duration"]
                    if work_time:
                        report += f"     ‚Ä¢ {work['date']} ({work_time} –≥–æ–¥.) - {work['description']}\n"
                    else:
                        report += f"     ‚Ä¢ {work['date']} - {work['description']}\n"

        report += f"‚è± <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å:</b> {format_time(user_data['total_time'])}\n\n"

    return report
