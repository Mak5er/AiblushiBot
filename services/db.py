import datetime
from typing import List, Tuple

from sqlalchemy import BigInteger, Integer, Boolean, String, select, update, DateTime, delete, and_, Text, ForeignKey, \
    or_
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column

from config import DATABASE_URL, CHAT_ID

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è asyncpg
engine = create_async_engine(DATABASE_URL, echo=True, pool_size=5, max_overflow=10, future=True)

async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    username: Mapped[str] = mapped_column(String, nullable=True)
    is_approved: Mapped[bool] = mapped_column(Boolean, default=False)


class DryingSession(Base):
    __tablename__ = "drying_sessions"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    dehydrator_id: Mapped[int] = mapped_column(Integer, nullable=False)
    start_time: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)
    finish_time: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)
    user_id: Mapped[int] = mapped_column(BigInteger, nullable=False)


class WorkSession(Base):
    __tablename__ = "work_sessions"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, nullable=False)
    partner_id: Mapped[int] = mapped_column(BigInteger, nullable=True)
    requested_by: Mapped[int] = mapped_column(BigInteger, nullable=False)  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ —Å–µ—Å—ñ—é
    work_type: Mapped[str] = mapped_column(String, nullable=False)  # "production", "packaging", "sales" –∞–±–æ —ñ–Ω—à—ñ —Ç–∏–ø–∏
    start_time: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)
    end_time: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=True)
    results: Mapped[str] = mapped_column(Text, nullable=True)
    message_id: Mapped[int] = mapped_column(Integer, nullable=True)  # ID –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    packages_count: Mapped[int] = mapped_column(Integer, nullable=True)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ (–¥–ª—è –ø–∞–∫—É–≤–∞–Ω–Ω—è)
    sales_amount: Mapped[float] = mapped_column(Integer, nullable=True)  # –°—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤ (–¥–ª—è –ø—Ä–æ–¥–∞–∂—ñ–≤)


class WorkPartner(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è —Ä–æ–±–æ—á–æ—ó —Å–µ—Å—ñ—ó"""
    __tablename__ = "work_partners"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    session_id: Mapped[int] = mapped_column(Integer, ForeignKey("work_sessions.id", ondelete="CASCADE"))
    partner_id: Mapped[int] = mapped_column(BigInteger, nullable=False)


class OtherWork(Base):
    __tablename__ = "other_work"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, nullable=False)
    partner_id: Mapped[int] = mapped_column(BigInteger, nullable=True)
    description: Mapped[str] = mapped_column(Text, nullable=False)
    work_date: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=False)
    duration: Mapped[int] = mapped_column(Integer, nullable=True)  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö


class OtherWorkPartner(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏"""
    __tablename__ = "other_work_partners"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    other_work_id: Mapped[int] = mapped_column(Integer, ForeignKey("other_work.id", ondelete="CASCADE"))
    partner_id: Mapped[int] = mapped_column(BigInteger, nullable=False)


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def add_user(user_id: int, username: str):
    async with async_session() as session:
        user = User(id=user_id, username=username)
        session.add(user)
        await session.commit()


async def is_user_approved(user_id: int) -> bool:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        return user.is_approved if user else False


async def approve_user(user_id: int):
    async with async_session() as session:
        await session.execute(update(User).where(User.id == user_id).values(is_approved=True))
        await session.commit()


async def reject_user(user_id: int):
    async with async_session() as session:
        await session.execute(update(User).where(User.id == user_id).values(is_approved=False))
        await session.commit()


async def is_dehydrator_busy(dehydrator_id: int) -> bool:
    async with async_session() as session:
        now = datetime.datetime.now()
        result = await session.execute(
            select(DryingSession).where(
                and_(
                    DryingSession.dehydrator_id == dehydrator_id,
                    DryingSession.finish_time > now
                )
            )
        )
        return result.scalar_one_or_none() is not None


async def start_drying(dehydrator_id: int, drying_hours: int, bot, user_id: int) -> datetime.datetime:
    if await is_dehydrator_busy(dehydrator_id):
        raise ValueError("‚ùå –¶–µ–π –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è!")

    now = datetime.datetime.now()
    finish_time = now + datetime.timedelta(hours=drying_hours)

    async with async_session() as session:
        new_session = DryingSession(
            dehydrator_id=dehydrator_id,
            start_time=now,
            finish_time=finish_time,
            user_id=user_id
        )
        session.add(new_session)
        await session.commit()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å—É—à–∫–∏
        await bot.send_message(
            CHAT_ID,
            f"üü¢ <b>–°–£–®–ö–ê –†–û–ó–ü–û–ß–ê–¢–ê</b> üü¢\n\n"
            f"üîπ –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä: <b>‚Ññ{dehydrator_id}</b>\n"
            f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{now.strftime('%H:%M')}</b>\n"
            f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{drying_hours} –≥–æ–¥.</b>\n"
            f"üèÅ –ó–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –æ: <b>{finish_time.strftime('%H:%M')}</b>",
            parse_mode="HTML"
        )

    return finish_time


async def check_and_notify_finished_drying(bot):
    async with async_session() as session:
        now = datetime.datetime.now()
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó, —è–∫—ñ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å
        result = await session.execute(
            select(DryingSession).where(
                DryingSession.finish_time <= now
            )
        )
        finished_sessions = result.scalars().all()

        for finished_session in finished_sessions:
            # –û–±—á–∏—Å–ª—é—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É –≥–æ–¥–∏–Ω–∞—Ö
            duration_seconds = (finished_session.finish_time - finished_session.start_time).total_seconds()
            duration_hours = duration_seconds / 3600
            hours = int(duration_hours)
            minutes = int((duration_hours - hours) * 60)

            duration_text = f"{hours} –≥–æ–¥."
            if minutes > 0:
                duration_text += f" {minutes} —Ö–≤."

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
            await bot.send_message(
                CHAT_ID,
                f"üî¥ <b>–°–£–®–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b> üî¥\n\n"
                f"üîπ –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä: <b>‚Ññ{finished_session.dehydrator_id}</b>\n"
                f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{finished_session.start_time.strftime('%H:%M')}</b>\n"
                f"üèÅ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: <b>{finished_session.finish_time.strftime('%H:%M')}</b>\n"
                f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration_text}</b>",
                parse_mode="HTML"
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞–≤ —Å—É—à–∫—É
            try:
                await bot.send_message(
                    finished_session.user_id,
                    f"üî¥ <b>–í–ê–®–ê –°–£–®–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b> üî¥\n\n"
                    f"üîπ –î–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä: <b>‚Ññ{finished_session.dehydrator_id}</b>\n"
                    f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: <b>{finished_session.start_time.strftime('%H:%M')}</b>\n"
                    f"üèÅ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: <b>{finished_session.finish_time.strftime('%H:%M')}</b>\n"
                    f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{duration_text}</b>",
                    parse_mode="HTML"
                )
            except Exception as e:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –ª–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {finished_session.user_id}: {str(e)}")

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—É —Å–µ—Å—ñ—é
            await session.execute(delete(DryingSession).where(DryingSession.id == finished_session.id))

        await session.commit()


async def get_dehydrator_session(dehydrator_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–µ–≥—ñ–¥—Ä–∞—Ç–æ—Ä–∞"""
    async with async_session() as session:
        now = datetime.datetime.now()
        result = await session.execute(
            select(DryingSession).where(
                and_(
                    DryingSession.dehydrator_id == dehydrator_id,
                    DryingSession.finish_time > now
                )
            )
        )
        session_data = result.scalar_one_or_none()
        return session_data


async def get_all_approved_users():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.is_approved == True))
        return result.scalars().all()


async def start_work_session(user_id: int, partner_id: int, work_type: str, all_partners=None) -> int:
    """–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—á—É –∑–º—ñ–Ω—É"""
    now = datetime.datetime.now()

    async with async_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∑–º—ñ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = await session.execute(
            select(WorkSession).where(
                and_(
                    WorkSession.user_id == user_id,
                    WorkSession.end_time == None
                )
            )
        )
        active_session = result.scalar_one_or_none()

        if active_session:
            raise ValueError("–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–º—ñ–Ω–∞!")

        new_session = WorkSession(
            user_id=user_id,
            partner_id=partner_id,
            requested_by=user_id,  # –î–æ–¥–∞—î–º–æ —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ —Å–µ—Å—ñ—é
            work_type=work_type,
            start_time=now
        )
        session.add(new_session)
        await session.commit()
        await session.refresh(new_session)

        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é WorkPartner
        if all_partners:
            for partner in all_partners:
                work_partner = WorkPartner(
                    session_id=new_session.id,
                    partner_id=partner
                )
                session.add(work_partner)

            await session.commit()

        return new_session.id


async def end_work_session(session_id: int, results: str, packages_count: int = None, sales_amount: float = None):
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—á—É –∑–º—ñ–Ω—É"""
    now = datetime.datetime.now()

    async with async_session() as session:
        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update_data = {"end_time": now, "results": results}

        # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤, –¥–æ–¥–∞—î–º–æ —ó—Ö
        if packages_count is not None:
            update_data["packages_count"] = packages_count

        # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –ø—Ä–æ–¥–∞–∂—ñ–≤, –¥–æ–¥–∞—î–º–æ —ó—ó
        if sales_amount is not None:
            update_data["sales_amount"] = sales_amount

        await session.execute(
            update(WorkSession)
            .where(WorkSession.id == session_id)
            .values(**update_data)
        )
        await session.commit()

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
        result = await session.execute(
            select(WorkSession).where(WorkSession.id == session_id)
        )
        updated_session = result.scalar_one_or_none()
        return updated_session


async def get_active_work_session(user_id: int):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É —Ä–æ–±–æ—á—É –∑–º—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async with async_session() as session:
        result = await session.execute(
            select(WorkSession).where(
                and_(
                    WorkSession.user_id == user_id,
                    WorkSession.end_time == None
                )
            )
        )
        return result.scalar_one_or_none()


async def update_work_session_message_id(session_id: int, message_id: int):
    """–û–Ω–æ–≤–∏—Ç–∏ ID –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏"""
    async with async_session() as session:
        await session.execute(
            update(WorkSession)
            .where(WorkSession.id == session_id)
            .values(message_id=message_id)
        )
        await session.commit()


async def add_other_work(user_id: int, partner_id: int, description: str, duration: int = None, all_partners=None):
    """–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ —ñ–Ω—à—É —Ä–æ–±–æ—Ç—É"""
    now = datetime.datetime.now()

    async with async_session() as session:
        new_work = OtherWork(
            user_id=user_id,
            partner_id=partner_id,
            description=description,
            work_date=now,
            duration=duration
        )
        session.add(new_work)
        await session.commit()
        await session.refresh(new_work)

        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é OtherWorkPartner
        if all_partners:
            for partner in all_partners:
                other_work_partner = OtherWorkPartner(
                    other_work_id=new_work.id,
                    partner_id=partner
                )
                session.add(other_work_partner)

            await session.commit()

        return new_work.id


async def get_user_by_id(user_id: int):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ ID"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        return result.scalar_one_or_none()


async def get_user_work_sessions(user_id: int, start_date: datetime.datetime, end_date: datetime.datetime):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"""
    async with async_session() as session:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Å—ñ—ó, –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≥–æ–ª–æ–≤–Ω–∏–º –∞–±–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
        query = select(WorkSession).where(
            and_(
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≥–æ–ª–æ–≤–Ω–∏–º –∞–±–æ –æ–¥–Ω–∏–º –∑ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
                or_(
                    WorkSession.user_id == user_id,
                    WorkSession.requested_by == user_id,
                    WorkSession.id.in_(
                        select(WorkPartner.session_id).where(WorkPartner.partner_id == user_id)
                    )
                ),
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é
                WorkSession.start_time >= start_date,
                WorkSession.start_time <= end_date,
                # –¢—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–µ—Å—ñ—ó
                WorkSession.end_time != None
            )
        ).order_by(WorkSession.start_time.desc())

        result = await session.execute(query)
        return result.scalars().all()


async def get_user_other_works(user_id: int, start_date: datetime.datetime, end_date: datetime.datetime):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"""
    async with async_session() as session:
        query = select(OtherWork).where(
            and_(
                or_(
                    OtherWork.user_id == user_id,
                    OtherWork.id.in_(
                        select(OtherWorkPartner.other_work_id).where(OtherWorkPartner.partner_id == user_id)
                    )
                ),
                OtherWork.work_date >= start_date,
                OtherWork.work_date <= end_date
            )
        ).order_by(OtherWork.work_date.desc())

        result = await session.execute(query)
        return result.scalars().all()


async def get_available_months(user_id: int) -> List[Tuple[int, int]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—è—Ü—ñ–≤, –∑–∞ —è–∫—ñ —î –¥–∞–Ω—ñ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Returns:
        List[Tuple[int, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–º—ñ—Å—è—Ü—å, —Ä—ñ–∫)
    """
    async with async_session() as session:
        from sqlalchemy import extract, distinct

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLAlchemy Core –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º—ñ—Å—è—Ü—ñ–≤ —ñ —Ä–æ–∫—ñ–≤
        # –ó–∞–ø–∏—Ç –¥–ª—è —Ä–æ–±–æ—á–∏—Ö —Å–µ—Å—ñ–π
        work_query = select(
            distinct(extract('month', WorkSession.start_time).cast(Integer).label('month')),
            extract('year', WorkSession.start_time).cast(Integer).label('year')
        ).where(
            (WorkSession.user_id == user_id) | (WorkSession.partner_id == user_id)
        ).where(
            WorkSession.end_time != None
        )

        result_work = await session.execute(work_query)
        work_months = [(int(row[0]), int(row[1])) for row in result_work]

        # –ó–∞–ø–∏—Ç –¥–ª—è —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏
        other_query = select(
            distinct(extract('month', OtherWork.work_date).cast(Integer).label('month')),
            extract('year', OtherWork.work_date).cast(Integer).label('year')
        ).where(
            (OtherWork.user_id == user_id) | (OtherWork.partner_id == user_id)
        )

        result_other = await session.execute(other_query)
        other_months = [(int(row[0]), int(row[1])) for row in result_other]

        # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        all_months = set(work_months + other_months)

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∫–æ–º —Ç–∞ –º—ñ—Å—è—Ü–µ–º —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É
        return sorted(all_months, key=lambda x: (x[1], x[0]), reverse=True)


async def get_all_work_sessions(start_date: datetime.datetime, end_date: datetime.datetime):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    async with async_session() as session:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLAlchemy –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å–µ—Å—ñ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥
        query = select(WorkSession).where(
            and_(
                WorkSession.start_time >= start_date,
                WorkSession.start_time <= end_date,
                WorkSession.end_time != None  # –¢—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–µ—Å—ñ—ó
            )
        ).order_by(WorkSession.start_time.desc())

        result = await session.execute(query)
        return result.scalars().all()


async def get_all_other_works(start_date: datetime.datetime, end_date: datetime.datetime):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    async with async_session() as session:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLAlchemy –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥
        query = select(OtherWork).where(
            and_(
                OtherWork.work_date >= start_date,
                OtherWork.work_date <= end_date
            )
        ).order_by(OtherWork.work_date.desc())

        result = await session.execute(query)
        return result.scalars().all()


async def get_available_months_all_users() -> List[Tuple[int, int]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—è—Ü—ñ–≤, –∑–∞ —è–∫—ñ —î –¥–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    Returns:
        List[Tuple[int, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–º—ñ—Å—è—Ü—å, —Ä—ñ–∫)
    """
    async with async_session() as session:
        from sqlalchemy import extract, distinct

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLAlchemy Core –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º—ñ—Å—è—Ü—ñ–≤ —ñ —Ä–æ–∫—ñ–≤
        # –ó–∞–ø–∏—Ç –¥–ª—è —Ä–æ–±–æ—á–∏—Ö —Å–µ—Å—ñ–π (–≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
        work_query = select(
            distinct(extract('month', WorkSession.start_time).cast(Integer).label('month')),
            extract('year', WorkSession.start_time).cast(Integer).label('year')
        ).where(
            WorkSession.end_time != None
        )

        result_work = await session.execute(work_query)
        work_months = [(int(row[0]), int(row[1])) for row in result_work]

        # –ó–∞–ø–∏—Ç –¥–ª—è —ñ–Ω—à–æ—ó —Ä–æ–±–æ—Ç–∏ (–≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
        other_query = select(
            distinct(extract('month', OtherWork.work_date).cast(Integer).label('month')),
            extract('year', OtherWork.work_date).cast(Integer).label('year')
        )

        result_other = await session.execute(other_query)
        other_months = [(int(row[0]), int(row[1])) for row in result_other]

        # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        all_months = set(work_months + other_months)

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∫–æ–º —Ç–∞ –º—ñ—Å—è—Ü–µ–º —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É
        return sorted(all_months, key=lambda x: (x[1], x[0]), reverse=True)
